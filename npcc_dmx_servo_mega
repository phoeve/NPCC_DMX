//
//   NPCC DMX Decoder and Servo Controller
//          This program is intended to run on a Arduino microcontroller.  It receives DMX packets, decodes
//          them, and positions servos on corresponding channels to corresponding positions based on the DMX 
//          value.  The program replaces the Arduino interrupt handler with its own ISR(USART3_RX_vect) to 
//          process incoming packets via a state machine.
//
//   Features
//          - Maps DMX packet values 0-255 to servo positions SERVO_MIN_VALUE thru SERVO_MAX_VALUE (below)
//          - RX light on Arduino board will blink as activity received via USB
//          - On Board LED on Arduino will blink as servos are controlled
//
//   Supported Processors (tested)
//          - Arduino UNO
//
//   Supported Servos (tested)
//          - JR DS821 Min/Max=23/159  (Use servo_calibrate to find Min/Max)
//
//   Author(s) Peter Hoeve (peter@hoeve.us)  NPCC Production Team
//
//   Based on example code from Akiba@Freaklabs.com and Arduino
//
//   History:
//        7/26/13 - 0.1 (PH) Original
//        7/29/13 - 0.2 (PH) Servo now moves relative to DMX value sent.
//        8/20/13 - 0.3 (PH) Ported to Mega using UART3 for DMX
//        8/23/13 - 0.4 (PH) Added LED support for RUNNING, SEE_DMX, SEE_MY_DMX
//

#define DEBUG 1

#include <Servo.h> 

#define NUM_CHANNELS 12 // Number of PWM channels used - this varies between Auduino Uno/Mega - 6/14
Servo myservo[NUM_CHANNELS]; // Servo object array
      // Servo specific info - servo should be calibrated.
#define SERVO_MIN_VALUE 23
#define SERVO_MAX_VALUE 158
#define SERVO_RANGE SERVO_MAX_VALUE-SERVO_MIN_VALUE

      // DMX info/ranges
#define DMX_MAX_VALUE 255
      // DMX packet states
enum {DMX_IDLE,  DMX_BREAK,  DMX_START,  DMX_RUN};
      // current state of DMX state machine
volatile unsigned char dmx_state;
      // this is the start address for the dmx frame
unsigned int dmx_start_addr = 1;
      // this is the current address of the dmx frame
unsigned int dmx_addr;
      // Arduino pins that will control servos based on dmx data
unsigned char dmx_pin[NUM_CHANNELS] = {2,3,4,5,6,7,8,9,10,11,12,13};
      // this is used to keep track of the channels
unsigned int chan_cnt;
      // this holds the dmx data
unsigned char dmx_data[NUM_CHANNELS];
      // tell us when to update the pins
volatile unsigned char update;


     
#define DIP_ON LOW             // If voltage is LOW (grounded), the dip switch is in the ON position.  
#define NUM_ADDRESS_BITS 9     // 2**9 gives 0-511
unsigned int address_pins[NUM_ADDRESS_BITS] = {30,31,32,33,34,35,36,37,38};
unsigned int myBaseAddress = 0;

      // LED pins
#define RUNNING 50
#define SEE_DMX 51
#define SEE_MY_DMX 52

void setup()
{
  int i;
  unsigned char val=0;
  
  // Console port
  Serial.begin(57600);
  Serial.write("setup() ...\n");
  
  pinMode(RUNNING, OUTPUT);    // init pins for 3 leds
  pinMode(SEE_DMX, OUTPUT);
  pinMode(SEE_MY_DMX, OUTPUT);
 
               // On power up or reset read base address from dip switch 
  for (i=0; i<NUM_ADDRESS_BITS; i++)
  {
    pinMode(address_pins[i], INPUT);           // set pin to input
    digitalWrite(address_pins[i], HIGH);       // turn on pullup resistor
    
    val = digitalRead(address_pins[i]);
    Serial.print(val);
    if (val==DIP_ON)
      bitSet(myBaseAddress, NUM_ADDRESS_BITS -i -1);   
  }
  
  dmx_start_addr = myBaseAddress +1;    // convert 0-511 -> 1-512
  
#ifdef DEBUG
  Serial.write("myBaseAddress is ");
  Serial.print(myBaseAddress);
  Serial.write("\n");
  Serial.write("dmx_start_addr is ");
  Serial.print(dmx_start_addr);
  Serial.write("\n");
#endif

    // set update flag idle
  update = 0;
  
  // set default DMX state
  dmx_state = DMX_IDLE;
  
  // set servo pins to "output" and zero position
  for (i=0; i<NUM_CHANNELS; i++)
  {
    myservo[i].attach(dmx_pin[i]);
    myservo[i].write(0);
  }
  
  // initialize UART for DMX
  // 250 kbps, 8 bits, no parity, 2 stop bits
  UCSR3C |= (1<<USBS3);
  Serial3.begin(250000);
  
}

/**************************************************************************/
/*!
  This is where we translate the dmx data to the pin outputs
*/
/**************************************************************************/
#ifdef DEBUG
int iteration = 0;
#endif

void loop()
{
  digitalWrite(SEE_DMX, LOW);    // reset activity LED
  digitalWrite(SEE_MY_DMX, LOW);    // reset activity LED
  digitalWrite(RUNNING, LOW);
  
  if (update)
  {
    update = 0;
    
#ifdef DEBUG
    iteration = iteration +1;
    if ((iteration % 100) == 0)
    {
      for (int j=0; j<NUM_CHANNELS; j++)
      {
        Serial.print(j);
        Serial.write("=");
        Serial.print(dmx_data[j]);
        Serial.write(",");
      }
      Serial.write("\n");
    }
#endif
    
    for (int i=0; i<NUM_CHANNELS; i++)
    {
                                    // Move the servo to the corresponding position.  DMX value (0->255) <<maps to>> SERVO_MIN_VALUE -> SERVO_MAX_VALUE
      myservo[i].write( (int) ( ( (float)dmx_data[i] / (float)DMX_MAX_VALUE ) * SERVO_RANGE ) + SERVO_MIN_VALUE);
        
      if (dmx_data[i] > 10)        // set activity LED, but filter out low (noise) values
        digitalWrite(SEE_MY_DMX, HIGH);    
    }
  }
  digitalWrite(RUNNING, HIGH);
}

/**************************************************************************/
/*!
  This is the interrupt service handler for the DMX
*/
/**************************************************************************/
ISR(USART3_RX_vect)
{
  unsigned char status = UCSR3A;
  unsigned char data = UDR3;
  
  switch (dmx_state)
  {
    case DMX_IDLE:
      if (status & (1<<FE0))
      {
        dmx_addr = 0;
        dmx_state = DMX_BREAK;
        update = 1;
      }
    break;
    
    case DMX_BREAK:
      if (data == 0)
      {
        dmx_state = DMX_START;
      }
      else
      {
        dmx_state = DMX_IDLE;
      }
    break;
    
    case DMX_START:
      digitalWrite(SEE_DMX, HIGH);   // Light up LED that DMX packets exist
      
      dmx_addr++;
      if (dmx_addr == dmx_start_addr)
      {
        chan_cnt = 0;
        dmx_data[chan_cnt++] = data;
        dmx_state = DMX_RUN;
      }
    break;
    
    case DMX_RUN:
      dmx_data[chan_cnt++] = data;
      if (chan_cnt >= NUM_CHANNELS)
      {
        dmx_state = DMX_IDLE;
      }
    break;
    
    default:
      dmx_state = DMX_IDLE;
    break;
  }
}
